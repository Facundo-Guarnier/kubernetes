apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
  name: web
spec:
  rules:
  - host: guarnier2-web.my.kube.um.edu.ar
    http:
      paths:
      - backend:
          service:
            name: web
            port:
              number: 80
        path: /
        pathType: Prefix

---

apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: web-assets
data:
  index.html: |
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Saludo</title>
    </head>
    <body>
        <h1>Hola, soy Guarnold (〃￣︶￣)人(￣︶￣〃)</h1>
        <p>¡Bienvenido/a a mi página!</p>
    </body>
    </html>

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  name: web
  labels:
    app: web

spec:
  serviceName: web

  selector:
    matchLabels:
      app: web

  replicas: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: web

    spec:
      containers:
      - image: bitnami/nginx:1.24.0
        name: nginx
        resources: {}

        ports:
          - name: web
            containerPort: 80
        
        volumeMounts:
        #! Volumen de datos persistentes
        - name: www
          mountPath: /usr/share/nginx/html
      
        #! Volumen para carga configmap
        - name: cm-vol
          mountPath: /opt/bitnami/nginx/html
      
      #! Volumen para carga configmap
      volumes:
      - name: cm-vol
        configMap:
          name: web-assets
        
  volumeClaimTemplates:
  #! Volumen de datos persistentes
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

status: 
  replicas: 1

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: web
  name: web
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: web
status:
  loadBalancer: {}
---
